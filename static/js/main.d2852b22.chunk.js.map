{"version":3,"sources":["components/Wrapper/index.js","components/Score/index.js","components/Card/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Score","class","href","alert","score","topscore","CardCartoon","alt","name","src","image","onClick","handleClickEvent","id","Title","App","state","cartoon","clicked","RandomImages","i","length","j","Math","floor","random","indexOf","setState","concat","this","map","Card","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wxXASeA,MANf,SAAkBC,GACd,OACA,yBAAKC,UAAU,WAAWD,EAAME,W,MCgBrBC,MAjBf,SAAgBH,GACZ,OACI,yBAAKI,MAAM,gDACP,uBAAGA,MAAM,eAAeC,KAAK,KAA7B,eACJ,wBAAID,MAAM,sBACN,wBAAIA,MAAM,YACLJ,EAAMM,OAEX,wBAAIF,MAAM,YAAV,UACWJ,EAAMO,MADjB,iBACsCP,EAAMQ,a,MCCzCC,MAVf,SAAsBT,GAClB,OACI,yBAAKC,UAAU,iBACX,yBAAKA,UAAU,QACf,yBAAKS,IAAKV,EAAMW,KAAMC,IAAKZ,EAAMa,MAAQC,QAAS,kBAAMd,EAAMe,iBAAiBf,EAAMgB,U,MCClFC,MANf,SAAejB,GACX,OACI,yBAAKC,UAAU,SAASD,EAAME,W,OCsFvBgB,E,4MAhFbC,MAAQ,CACNZ,MAAO,EACPC,SAAU,EACVY,UACAd,MAAO,0BACPe,QAAQ,I,EAIVC,aAAe,WACb,IAAK,IAAIC,EAAI,EAAKJ,MAAMC,QAAQI,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACtD,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADc,EAEL,CAAC,EAAKJ,MAAMC,QAAQK,GAAI,EAAKN,MAAMC,QAAQG,IAA3F,EAAKJ,MAAMC,QAAQG,GAFkC,KAE9B,EAAKJ,MAAMC,QAAQK,GAFW,KAIxD,OAAO,EAAKN,MAAMC,S,EAGpBL,iBAAmB,SAACC,GACnB,IAAIK,EAAS,EAAKF,MAAME,SAEI,IAAvBA,EAAQQ,QAAQb,IACf,EAAKG,MAAMZ,MAAQ,EAAI,EAAKY,MAAMX,SACnC,EAAKsB,SAAS,CACZtB,SAAU,EAAKW,MAAMZ,MAAQ,IAG/B,EAAKuB,SAAS,CACZtB,SAAU,EAAKW,MAAMX,WAGxB,EAAKsB,SAAS,CACbT,QAASA,EAAQU,OAAOf,GACxBT,MAAQ,EAAKY,MAAMZ,MAAQ,EAC3BD,MAAO,2BAKmB,IAAxB,EAAKa,MAAMX,SACX,EAAKsB,SAAS,CACZxB,MAAO,eACPC,MAAM,EACNC,SAAS,EACTa,QAAQ,KAGV,EAAKS,SAAS,CACXxB,MAAO,+BACRC,MAAO,EACPc,QAAS,M,uDAKV,IAAD,OAEN,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAOf,MAAQ0B,KAAKb,MAAMb,MAAQC,MAASyB,KAAKb,MAAMZ,MAAOC,SAAUwB,KAAKb,MAAMX,WAClF,kBAAC,EAAD,uGAIA,yBAAKP,UAAU,aACb,yBAAKA,UAAU,OACZ+B,KAAKV,aAAaF,GAASa,KAAI,SAAAb,GAAO,OACnC,kBAACc,EAAD,CACElB,GAAII,EAAQJ,GACZL,KAAMS,EAAQT,KACdE,MAAQO,EAAQP,MAChBE,iBAAkB,EAAKA,6B,GAxEvBoB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d2852b22.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./wrapper.css\"\r\n\r\nfunction Wrapper (props){\r\n    return(\r\n    <div className=\"wrapper\">{props.children}</div>\r\n    )\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./scores.css\"\r\n\r\n\r\nfunction Score (props){\r\n    return(\r\n        <nav class=\"navbar navbar-expand-sm bg-info navbar-light\">\r\n            <a class=\"navbar-brand\" href=\"/\">Clicky Game</a>\r\n        <ul class=\"navbar-nav ml-auto\">\r\n            <li class=\"nav-item\">\r\n                {props.alert}\r\n            </li>\r\n            <li class=\"nav-item\">\r\n               Score: {props.score} | Top Score: {props.topscore}\r\n            </li>\r\n        </ul>\r\n      </nav>        \r\n        \r\n    )\r\n}\r\n\r\nexport default Score;\r\n","import React from \"react\";\r\nimport \"./card.css\"\r\n\r\n\r\nfunction CardCartoon (props){\r\n    return(\r\n        <div className=\"col-md-4 mt-4\">\r\n            <div className=\"card\">\r\n            <img alt={props.name} src={props.image}  onClick={() => props.handleClickEvent(props.id)}/>\r\n            </div>\r\n        </div>                 \r\n    )\r\n}\r\n\r\nexport default CardCartoon;","import React from \"react\";\r\nimport \"./title.css\"\r\n\r\nfunction Title(props){\r\n    return(\r\n        <div className=\"title\">{props.children}</div>\r\n    )\r\n}\r\n\r\nexport default Title","import React, { Component } from 'react';\nimport './App.css';\nimport Wrapper from \"./components/Wrapper\";\nimport Score from \"./components/Score\";\nimport CardCartoon from \"./components/Card\";\nimport Title from \"./components/Title\";\nimport cartoon from \"./cartoon.json\";\n\n\nclass App extends Component {\n\n  state = {\n    score :0,\n    topscore :0,\n    cartoon,\n    alert: \"Click an image to begin\",\n    clicked:[]\n     \n  }\n\n  RandomImages = () => {\n    for (var i = this.state.cartoon.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      [this.state.cartoon[i], this.state.cartoon[j]] = [this.state.cartoon[j], this.state.cartoon[i]];\n    }\n    return this.state.cartoon;\n  }\n\n  handleClickEvent = (id) => {\n   var clicked= this.state.clicked;\n\n    if((clicked.indexOf(id)===-1) ){\n      if(this.state.score + 1 > this.state.topscore ) {\n        this.setState({\n          topscore :this.state.score + 1\n        })\n      }else{\n        this.setState({\n          topscore :this.state.topscore\n        })\n      }\n       this.setState({\n        clicked: clicked.concat(id),\n        score : this.state.score + 1,\n        alert :\"You guessed correctly\"\n       \n       })\n    \n    }else{\n      if( this.state.topscore === 9){\n          this.setState({\n            alert: \"You Win!!!!!\",\n            score:0,\n            topscore:0,\n            clicked:[]\n          })\n      }else {\n          this.setState({\n             alert: \"You guessed incorrectly!!!!!\",\n            score: 0,\n            clicked: []\n          })\n        }\n      } \n  }\n  render(){\n    \n    return(\n      <Wrapper>\n        <Score alert= {this.state.alert}  score = {this.state.score} topscore={this.state.topscore}></Score>\n        <Title>\n        Click on a character to earn points.\n        Don't click on any more than once or the game will reset!\n        </Title>\n        <div className=\"container\">\n          <div className=\"row\">\n            {this.RandomImages(cartoon).map(cartoon =>(\n                <CardCartoon  \n                  id={cartoon.id}\n                  name={cartoon.name}\n                  image ={cartoon.image}\n                  handleClickEvent={this.handleClickEvent}>\n                </CardCartoon>          \n             ))}\n          </div>\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}